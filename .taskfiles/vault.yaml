---
version: '3'

env:
  VAULT_ADDR: https://vault.logfold.com
  VAULT_TOKEN: 
    sh: if [ -f {{.ROOT_DIR}}/.vault.json ] && [ -z "$VAULT_TOKEN" ]; then cat {{.ROOT_DIR}}/.vault.json | jq -r '.root_token'; fi

tasks:
  init:
    desc: initialize vault
    cmds:
      - kubectl --context {{.ENVIRONMENT}} -n vault exec -ti vault-0 -- vault operator init -n 1 -t 1 --format=json > {{.ROOT_DIR}}/.vault.json
  bootstrap:
    desc: bootstrap vault cluster with all auth backends, kv secrets, roles and policies
    cmds:
      - task vault:init
      - task vault:unseal
      - task vault:enable-k8s-auth
      - task vault:add-policies
      - task vault:add-roles
      - task vault:add-rootca
      - task vault:add-intca
      - task vault:enable-password-generators
      - task vault:enable-ldap
      - task vault:enable-kv
      - task vault:add-kv-secrets
  status:
    desc: vault status
    cmds:
      - vault status
  unseal:
    desc: vault unseal
    cmds:
      - kubectl --context k0s -n vault exec -ti vault-0 -- vault operator unseal $( cat {{.ROOT_DIR}}/.vault.json | jq -r '.unseal_keys_b64[0]')
  # ca
  add-rootca:
    desc: setup root ca pki engine
    cmds:
      - vault secrets enable -path=pki/root_ca pki || true
      - vault secrets tune -max-lease-ttl=87600h pki/root_ca
      - vault write -field=certificate pki/root_ca/root/generate/internal common_name="svc" ttl=87600h > /tmp/ca_cert.crt
      - vault write pki/root_ca/config/urls issuing_certificates="{{ .VAULT_ADDR }}/v1/pki/ca" crl_distribution_points="{{ .VAULT_ADDR }}/v1/pki/crl"
      - rm  /tmp/ca_cert.crt
  remove-intca:
    desc: remove intermediate ca pki engine for k8s cluster
    cmds:
      - vault secrets disable pki/int_ca
  add-intca:
    desc: enable intermediate ca pki engine for k8s cluster
    cmds:
      - vault secrets enable -path=pki/int_ca pki || true
      - vault secrets tune -max-lease-ttl=43800h pki/int_ca
      - vault write -format=json pki/int_ca/intermediate/generate/internal common_name="svc" | jq -r '.data.csr' > pki_intermediate.csr
      - vault write -format=json pki/root_ca/root/sign-intermediate csr=@pki_intermediate.csr format=pem_bundle ttl="43800h" | jq -r '.data.certificate' > ca.cert.pem
      - vault write pki/int_ca/intermediate/set-signed certificate=@ca.cert.pem
      - task vault:add-intca-issuer
      - rm pki_intermediate.csr
  add-intca-issuer:
    cmds:
      - vault write pki/int_ca/roles/{{.ENVIRONMENT}} issuer_ref="$(vault read -field=default pki/int_ca/config/issuers)" allowed_domains="admin-{{.ENVIRONMENT}},remote,svc,cilium.io" allowed_uri_sans="admin-{{.ENVIRONMENT}},remote,clustermesh-apiserver" allow_bare_domains=true allow_subdomains=true max_ttl="2160h"
      #- vault read --format=json pki/int_ca/cert/ca | jq -r .data.certificate > ca.cert.pem
      #- kubectl --context {{.ENVIRONMENT}} -n cert-manager delete secret vault-root-ca || true
      #- kubectl --context {{.ENVIRONMENT}} -n cert-manager create secret generic vault-root-ca --from-file=ca.cert.pem=ca.cert.pem || true
      #- rm ca.cert.pem

  # oidc
  enable-oidc-provider:
    cmds:
      - vault write identity/oidc/provider/default
          allowed_client_ids="*"
  # ldap
  enable-ldap:
    desc: configure vault ldap auth
    cmds:
      - vault auth disable ldap
      - vault auth enable ldap
      - vault write auth/ldap/config
          url="ldaps://lldap.logfold.com"
          userattr=uid
          userdn="ou=people,{{.LLDAP_LDAP_BASE_DN}}"
          discoverdn=true
          groupdn="ou=groups,{{.LLDAP_LDAP_BASE_DN}}"
          groupfilter='(member={{printf "{{.UserDN}}"}})'
          groupattr="cn"
          binddn="uid=admin,ou=people,{{.LLDAP_LDAP_BASE_DN}}"
          bindpass="{{.LLDAP_LDAP_USER_PASS}}"
          insecure_tls=false
          starttls=true
      - vault write auth/ldap/groups/vault-admin policies=admin
  # k8s auth backend
  enable-k8s-auth:
    desc: configure vault k8s auth
    cmds:
      - vault auth disable kubernetes/{{.ENVIRONMENT}} || true
      - vault auth enable -path=kubernetes/{{.ENVIRONMENT}} kubernetes || true
      - kubectl --context {{.ENVIRONMENT}} -n kube-system apply -f {{.ROOT_DIR}}/kubernetes/templates/vault-auth.yaml
      - kubectl --context {{.ENVIRONMENT}} -n kube-system get secret vault-auth-token -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/config
          token_reviewer_jwt="$(kubectl --context {{.ENVIRONMENT}} -n kube-system get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d; echo)"
          kubernetes_host="$(kubectl --context {{.ENVIRONMENT}} config view --minify | yq e '.clusters[].cluster.server')"
          kubernetes_ca_cert=@ca.crt
          disable_iss_validation=true
      - rm ca.crt
  add-policies:
    desc: add policies
    cmds:
      - echo '
        path "sys/health" {
          capabilities = ["read", "sudo"]
        }
        path "sys/policies/acl"
        {
          capabilities = ["list"]
        }
        path "sys/policies/acl/*"
        {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }
        path "auth/*"
        {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }
        path "sys/auth/*"
        {
          capabilities = ["create", "update", "delete", "sudo"]
        }
        path "sys/auth"
        {
          capabilities = ["read"]
        }
        path "secret/*"
        {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }
        path "sys/leases/*"
        {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }
        path "sys/leases/lookup"
        {
          capabilities = ["list", "sudo"]
        }
        path "sys/mounts/*"
        {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }
        path "sys/mounts"
        {
          capabilities = ["read"]
        }' | vault policy write admin -
      - echo -e "path \"pki/int_ca/sign/k0s\" { capabilities = [\"update\"] }\npath \"secret/data/cert-manager/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write k0s -
      - echo -e "path \"pki/int_ca/sign/main\" { capabilities = [\"update\"] }\npath \"secret/data/cert-manager/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write main -
      - echo -e "path \"pki/int_ca/sign/default\" { capabilities = [\"update\"] }\npath \"secret/data/cert-manager/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write cert-manager -
      - echo -e "path \"secret/data/database/*\" { capabilities = [\"read\", \"list\"] } " | vault policy write database -
      - echo -e "path \"secret/data/flux-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write flux-system -
      - echo -e "path \"secret/data/home-automation/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation -
      - echo -e "path \"secret/data/ingress/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write ingress -
      - echo -e "path \"secret/data/kube-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write kube-system -
      - echo -e "path \"secret/data/media/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write media -      
      - echo -e "path \"secret/data/monitoring/*\" { capabilities = [\"read\", \"list\"] }\npath \"sys/metrics\" { capabilities = [\"read\", \"list\"] }" | vault policy write monitoring -
      - echo -e "path \"secret/data/security/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write security -
      - echo -e "path \"secret/data/storage/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write storage -
      - echo -e "path \"secret/data/volsync/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write volsync -
  add-roles:
    desc: add k8s roles
    cmds:
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/vault-issuer
          bound_service_account_names=vault-issuer
          bound_service_account_namespaces=kube-system,cert-manager
          policies={{.ENVIRONMENT}},default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/flux-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=flux-system
          policies=flux-system,security,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/database
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=database
          policies=volsync,database,media,home-automation,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=home-automation
          policies=volsync,database,home-automation,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/media
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=media
          policies=media,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/monitoring
          bound_service_account_names=vault-auth,kube-prometheus-stack-prometheus,vmagent-victoria-metrics
          bound_service_account_namespaces=monitoring
          policies=monitoring,flux-system,storage,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/cert-manager
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=cert-manager
          policies=cert-manager,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/kube-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=kube-system
          policies=kube-system,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/ingress
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=ingress
          policies=ingress,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/volsync
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=volsync
          policies=volsync,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/security
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=security
          policies=security,default
          ttl=1h
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/storage
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=storage
          policies=security,storage,default
          ttl=1h
  # password generators
  enable-password-generators:
    desc: enable password generators
    cmds:
      # default
      - echo -e '
        length=45

        rule "charset" {
          charset = "abcdefghijklmnopqrstuvwxyz"
          min-chars = 3
        }

        rule "charset" {
          charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          min-chars = 3
        }

        rule "charset" {
          charset = "0123456789"
          min-chars = 3
        }

        rule "charset" {
          charset = "!@#_-+=%&*<>"
          min-chars = 3
        }'| vault write sys/policies/password/default policy=-
  # kv
  disable-kv:
    desc: disable kv secrets engine
    cmds:
      - vault secrets disable secret
  enable-kv:
    desc: enable kv secrets engine
    cmds:
      - vault secrets enable -path=secret kv-v2
  add-kv-secrets:
    desc: add kv secrets
    cmds:
      # flux-system/notification
      - vault kv put -mount=secret flux-system/notification
          SLACK_WEBHOOK="{{.SLACK_WEBHOOK}}"
      # database/emqx
      - vault kv put -mount=secret database/emqx
          EMQX_ADMIN_PASSWORD="$(vault read -field=password sys/policies/password/default/generate)"
          EMQX_USER1_NAME="mqtt"
          EMQX_USER1_PASSWORD="$(vault read -field=password sys/policies/password/default/generate)"
      # database/memcached
      - vault kv put -mount=secret database/memcached
          MEMCACHED_PASSWORD="$(vault read -field=password sys/policies/password/default/generate)"
      # home-automation/home-assistant
      - vault kv put -mount=secret home-automation/home-assistant
          HASS_POSTGRES_SUPER_USER="{{.HASS_POSTGRES_SUPER_USER}}"
          HASS_POSTGRES_SUPER_PASSWORD="{{.HASS_POSTGRES_SUPER_PASSWORD}}"
          HASS_POSTGRES_USER="{{.HASS_POSTGRES_USER}}"
          HASS_POSTGRES_PASSWORD="{{.HASS_POSTGRES_PASSWORD}}"
          HASS_ALARM_CODE="{{.HASS_ALARM_CODE}}"
          HASS_GIT_REPO="{{.HASS_GIT_REPO}}"
          HASS_DEPLOY_KEY_B64="{{.HASS_DEPLOY_KEY_B64}}"
          HASS_HACS_TOKEN="{{.HASS_HACS_TOKEN}}"
          HASS_LDAP_ROOT="{{.HASS_LDAP_ROOT}}"
          HASS_LOCATION_LAT="{{.HASS_LOCATION_LAT}}"
          HASS_LOCATION_LONG="{{.HASS_LOCATION_LONG}}"
          HASS_DRAC_IP="{{.HASS_DRAC_IP}}"
      # home-automation/tidbyt-proxy
      - vault kv put -mount=secret home-automation/tidbyt-proxy
          TIDBYT_API_KEY="{{.TIDBYT_API_KEY}}"
          TIDBYT_DEVICE_ID="{{.TIDBYT_DEVICE_ID}}"
      # home-automation/unifi-downloader
      - vault kv put -mount=secret home-automation/unifi-downloader
          UNIFI_DOWNLOADER_HOST="{{.UNIFI_DOWNLOADER_HOST}}"
          UNIFI_DOWNLOADER_USERNAME="{{.UNIFI_DOWNLOADER_USERNAME}}"
          UNIFI_DOWNLOADER_PASSWORD="{{.UNIFI_DOWNLOADER_PASSWORD}}"
      # ingress/cloudflare
      - vault kv put -mount=secret ingress/cloudflare
          CLOUDFLARE_EMAIL="{{.CLOUDFLARE_EMAIL}}"
          CLOUDFLARE_TOKEN="{{.CLOUDFLARE_TOKEN}}"
          CLOUDFLARE_RECORD_NAME="{{.CLOUDFLARE_RECORD_NAME}}"
      # media/immich
      - vault kv put -mount=secret media/immich
          IMMICH_JWT_SECRET="$(vault read -field=password sys/policies/password/default/generate)"
          IMMICH_POSTGRES_SUPER_USER="{{.IMMICH_POSTGRES_SUPER_USER}}"
          IMMICH_POSTGRES_SUPER_PASSWORD="{{.IMMICH_POSTGRES_SUPER_PASSWORD}}"
          IMMICH_POSTGRES_USER="{{.IMMICH_POSTGRES_USER}}"
          IMMICH_POSTGRES_PASSWORD="{{.IMMICH_POSTGRES_PASSWORD}}"
      # monitoring/grafana
      - vault kv put -mount=secret monitoring/grafana
          GRAFANA_ADMIN_USER="admin"
          GRAFANA_ADMIN_PASSWORD="$(vault read -field=password sys/policies/password/default/generate)"
          GRAFANA_LDAP_USERNAME="{{.GRAFANA_LDAP_USERNAME}}"
          GRAFANA_LDAP_PASSWORD="{{.GRAFANA_LDAP_PASSWORD}}"
          GRAFANA_LDAP_ROOT="{{.GRAFANA_LDAP_ROOT}}"
          GRAFANA_POSTGRES_SUPER_USER="{{.GRAFANA_POSTGRES_SUPER_USER}}"
          GRAFANA_POSTGRES_SUPER_PASSWORD="{{.GRAFANA_POSTGRES_SUPER_PASSWORD}}"
          GRAFANA_POSTGRES_USER="{{.GRAFANA_POSTGRES_USER}}"
          GRAFANA_POSTGRES_PASSWORD="{{.GRAFANA_POSTGRES_PASSWORD}}"
      # monitoring/unpoller
      - vault kv put -mount=secret monitoring/unpoller
          UP_UNIFI_DEFAULT_USER="{{.UP_UNIFI_DEFAULT_USER}}"
          UP_UNIFI_DEFAULT_PASS="{{.UP_UNIFI_DEFAULT_PASS}}"
      # security/atuin
      - vault kv put -mount=secret security/atuin
          ATUIN_POSTGRES_SUPER_USER="{{.ATUIN_POSTGRES_SUPER_USER}}"
          ATUIN_POSTGRES_SUPER_PASSWORD="{{.ATUIN_POSTGRES_SUPER_PASSWORD}}"
          ATUIN_POSTGRES_USER="{{.ATUIN_POSTGRES_USER}}"
          ATUIN_POSTGRES_PASSWORD="{{.ATUIN_POSTGRES_PASSWORD}}"
      # security/dex
      - vault kv put -mount=secret security/dex
          DEX_IMMICH_CLIENT_SECRET="$(vault read -field=password sys/policies/password/default/generate)"
          DEX_GITOPS_CLIENT_SECRET="$(vault read -field=password sys/policies/password/default/generate)"
      # security/glauth
      - vault kv put -mount=secret security/glauth
          GLAUTH_LDAP_BASE_DN="{{.GLAUTH_LDAP_BASE_DN}}"
          GLAUTH_USER_SEARCH_NAME="{{.GLAUTH_USER_SEARCH_NAME}}"
          GLAUTH_USER_SEARCH_PASSWORD_BCRYPT="{{.GLAUTH_USER_SEARCH_PASSWORD_BCRYPT}}"
          GLAUTH_USER_DAN_NAME="{{.GLAUTH_USER_DAN_NAME}}"
          GLAUTH_USER_DAN_EMAIL="{{.GLAUTH_USER_DAN_EMAIL}}"
          GLAUTH_USER_DAN_PASSWORD_BCRYPT="{{.GLAUTH_USER_DAN_PASSWORD_BCRYPT}}"
      # security/lldap
      - vault kv put -mount=secret security/lldap
          LLDAP_POSTGRES_SUPER_USER="{{.LLDAP_POSTGRES_SUPER_USER}}"
          LLDAP_POSTGRES_SUPER_PASSWORD="{{.LLDAP_POSTGRES_SUPER_PASSWORD}}"
          LLDAP_POSTGRES_USER="{{.LLDAP_POSTGRES_USER}}"
          LLDAP_POSTGRES_PASSWORD="{{.LLDAP_POSTGRES_PASSWORD}}"
          LLDAP_JWT_SECRET="$(vault read -field=password sys/policies/password/default/generate)"
          LLDAP_LDAP_USER_EMAIL="{{.LLDAP_LDAP_USER_EMAIL}}"
          LLDAP_LDAP_USER_PASS="{{.LLDAP_LDAP_USER_PASS}}"
          LLDAP_SERVER_KEY_SEED="{{.LLDAP_SERVER_KEY_SEED}}"
          LLDAP_LDAP_BASE_DN="{{.LLDAP_LDAP_BASE_DN}}"
      # security/oauth2-proxy
      - vault kv put -mount=secret security/oauth2-proxy
          OAUTH2_CLIENT_SECRET="$(vault read -field=password sys/policies/password/default/generate)"
          OAUTH2_COOKIE_SECRET="$(vault read -field=password sys/policies/password/default/generate)"
      # storage/minio
      - vault kv put -mount=secret storage/minio
          MINIO_ROOT_USER="minio"
          MINIO_ROOT_PASSWORD="$(vault read -field=password sys/policies/password/default/generate)"
      # volsync
      - vault kv put -mount=secret volsync/volsync
          RESTIC_URL="{{.RESTIC_URL}}"
      - vault kv put -mount=secret volsync/esphome
          RESTIC_ESPHOME_PASSWORD="{{.RESTIC_ESPHOME_PASSWORD}}"
      - vault kv put -mount=secret volsync/home-assistant
          RESTIC_HASS_PASSWORD="{{.RESTIC_HASS_PASSWORD}}"
      - vault kv put -mount=secret volsync/zwavejs
          RESTIC_ZWAVEJS_PASSWORD="{{.RESTIC_ZWAVEJS_PASSWORD}}"
  generate-env-file:
    desc: regenerate env file from vault kv secrets
    vars:
      SECRET_PATH: secret/
      OUTPUT_FILE: .env
    cmds:
    - echo "" > {{.OUTPUT_FILE}}      
    # vault kv secrets
    - |
      function traverse {
        local path="$1"
        vault_keys=$(vault kv list -format=json $1 2>&1)
        for secret in $(echo "$vault_keys" | jq -r '.[]'); do
          if [[ "$secret" == */ ]]; then
            traverse "$path$secret"
          else
            echo "# $path$secret" >> {{.OUTPUT_FILE}}
            vault kv get -format=yaml "$path$secret" | yq '.data.data' | sed 's/: /=/' >> {{.OUTPUT_FILE}}
            echo "" >> {{.OUTPUT_FILE}}
          fi
        done
      }
      traverse {{.SECRET_PATH}}
  # database
  disable-database-engine:
    desc: disable vault database engine
    cmds:
      - vault secrets disable databases
  enable-database-engine:
    desc: enable vault database engine
    cmds:
      - vault secrets enable -path=databases database
  add-database-connections:
    desc: add vault database connections
    cmds:
      # home-automation/home_assistant
      - vault write databases/config/home_assistant
          plugin_name="postgresql-database-plugin"
          allowed_roles="home-assistant"
          connection_url="postgresql://{{`{{username}}`}}:{{`{{password}}`}}@home-assistant-db.home-automation:5432/home_assistant"
          username="postgres"
          password="{{.HASS_POSTGRES_SUPER_PASSWORD}}"
          username_template="{{`{{.RoleName}}`}}-{{`{{random 8}}`}}"
      - vault write databases/roles/home-assistant
          db_name="home_assistant"
          creation_statements="CREATE ROLE \"{{`{{name}}`}}\" WITH LOGIN PASSWORD '{{`{{password}}`}}' VALID UNTIL '{{`{{expiration}}`}}'; GRANT role_vault TO \"{{`{{name}}`}}\";"
          revocation_statements="REVOKE role_vault FROM \"{{`{{name}}`}}\"; DROP ROLE \"{{`{{name}}`}}\";"
          default_ttl="1h"
          max_ttl="1h"
      # media/immich
      - vault write databases/config/immich
          plugin_name="postgresql-database-plugin"
          allowed_roles="immich"
          connection_url="postgresql://{{`{{username}}`}}:{{`{{password}}`}}@immich-db.media:5432/immich"
          username="postgres"
          password="{{.IMMICH_POSTGRES_SUPER_PASSWORD}}"
          username_template="{{`{{.RoleName}}`}}-{{`{{random 8}}`}}"
      - vault write databases/roles/immich
          db_name="immich"
          creation_statements="CREATE ROLE \"{{`{{name}}`}}\" WITH LOGIN PASSWORD '{{`{{password}}`}}' VALID UNTIL '{{`{{expiration}}`}}'; GRANT role_vault TO \"{{`{{name}}`}}\";"
          revocation_statements="REVOKE role_vault FROM \"{{`{{name}}`}}\"; DROP ROLE \"{{`{{name}}`}}\";"
          default_ttl="1h"
          max_ttl="1h"
