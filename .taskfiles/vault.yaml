---
version: '3'

env:
  VAULT_TOKEN: 
    sh: if [ -f {{.ROOT_DIR}}/.vault.json ] && [ -z "$VAULT_TOKEN" ]; then cat {{.ROOT_DIR}}/.vault.json | jq -r '.root_token'; fi

tasks:
  init:
    desc: initialize vault
    cmds:
      - kubectl -n vault exec -ti vault-0 -- vault operator init -n 1 -t 1 --format=json > {{.ROOT_DIR}}/.vault.json
  bootstrap:
    desc: bootstrap auth/roles
    cmds:
      - task vault:enable-k8s-auth
      - task vault:add-roles
  status:
    desc: vault status
    cmds:
      - vault status
  unseal:
    desc: vault unseal
    cmds:
      - kubectl -n vault exec -ti vault-0 -- vault operator unseal $( cat {{.ROOT_DIR}}/.vault.json | jq -r '.unseal_keys_b64[0]')
  # ca
  add-rootca:
    desc: setup root ca pki engine
    cmds:
      - vault secrets enable -path=pki/root_ca pki || true
      - vault secrets tune -max-lease-ttl=87600h pki/root_ca
      - vault write -field=certificate pki/root_ca/root/generate/internal common_name="svc" ttl=87600h > /tmp/ca_cert.crt
      - vault write pki/root_ca/config/urls issuing_certificates="{{ .VAULT_ADDR }}/v1/pki/ca" crl_distribution_points="{{ .VAULT_ADDR }}/v1/pki/crl"
      - rm  /tmp/ca_cert.crt
  add-intca:
    desc: enable intermediate ca pki engine for k8s cluster
    cmds:
      - vault secrets enable -path=pki/int_ca pki || true
      - vault secrets tune -max-lease-ttl=43800h pki/int_ca
      - vault write -format=json pki/int_ca/intermediate/generate/internal common_name="svc.cluster.local" | jq -r '.data.csr' > pki_intermediate.csr
      - vault write -format=json pki/root_ca/root/sign-intermediate csr=@pki_intermediate.csr format=pem_bundle ttl="43800h" | jq -r '.data.certificate' > ca.cert.pem
      - vault write pki/int_ca/intermediate/set-signed certificate=@ca.cert.pem
      - vault write pki/int_ca/roles/default issuer_ref="$(vault read -field=default pki/int_ca/config/issuers)" allowed_domains="svc.cluster.local" allow_bare_domains=true allow_subdomains=true max_ttl="720h"
      - kubectl --context k0s -n cert-manager create secret generic vault-root-ca --from-file=ca.cert.pem=ca.cert.pem || true
      - kubectl --context k8s -n cert-manager create secret generic vault-root-ca --from-file=ca.cert.pem=ca.cert.pem || true
      - rm ca.cert.pem
      - rm pki_intermediate.csr
  add-vault-issuers:
    desc: add vault issuers
    cmds:
      - vault auth enable -path=approle approle || true
      # private issuer
      - vault write auth/approle/role/cert-manager token_policies="cert-manager" token_ttl=1h token_max_ttl=4h
      - kubectl --context k0s -n ingress create secret generic cert-manager-vault-approle --from-literal=secretId=$(vault write -force -field=secret_id auth/approle/role/cert-manager/secret-id) || true
      - kubectl --context k8s -n ingress create secret generic cert-manager-vault-approle --from-literal=secretId=$(vault write -force -field=secret_id auth/approle/role/cert-manager/secret-id) || true
      - ROLE_ID=$(vault read -field role_id auth/approle/role/cert-manager/role-id ) envsubst < {{.CLUSTER_DIR}}/templates/vault-issuer.yaml | kubectl --context k0s apply -f -
      - ROLE_ID=$(vault read -field role_id auth/approle/role/cert-manager/role-id ) envsubst < {{.CLUSTER_DIR}}/templates/vault-issuer.yaml | kubectl --context k8s apply -f -
  # oidc
  enable-oidc-provider:
    cmds:
      - vault write identity/oidc/provider/default
          allowed_client_ids="*"
  # ldap
  enable-ldap:
    desc: configure vault ldap auth
    cmds:
      - vault auth disable ldap
      - vault auth enable ldap
      - vault write auth/ldap/config
          url="ldaps://lldap.{{.K0S_DOMAIN}}"
          userattr=uid
          userdn="ou=people,{{.LLDAP_LDAP_BASE_DN}}"
          discoverdn=true
          groupdn="ou=groups,{{.LLDAP_LDAP_BASE_DN}}"
          groupfilter='(member={{printf "{{.UserDN}}"}})'
          groupattr="cn"
          binddn="uid=admin,ou=people,{{.LLDAP_LDAP_BASE_DN}}"
          bindpass="{{.LLDAP_LDAP_USER_PASS}}"
          insecure_tls=false
          starttls=true
      - echo "path \"*\" { capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"] }" | vault policy write admin -
      - vault write auth/ldap/groups/vault-admin policies=admin
  # k8s auth
  enable-k8s-auth:
    desc: configure vault k8s auth
    cmds:
      # k8s
      - vault auth disable kubernetes/k8s || true
      - vault auth enable -path=kubernetes/k8s kubernetes || true
      - kubectl --context k8s -n kube-system apply -f {{.ROOT_DIR}}/kubernetes/templates/vault-auth.yaml
      - kubectl --context k8s -n kube-system get secret vault-auth-token -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
      - vault write auth/kubernetes/k8s/config
          token_reviewer_jwt="$(kubectl -n kube-system get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d; echo)"
          kubernetes_host="https://{{.K8S_VIP_IP}}"
          kubernetes_ca_cert=@ca.crt
          disable_iss_validation=true
      - rm ca.crt
      # k0s
      - vault auth disable kubernetes/k0s
      - vault auth enable -path=kubernetes/k0s kubernetes
      - kubectl --context k0s -n kube-system apply -f {{.ROOT_DIR}}/kubernetes/templates/vault-auth.yaml
      - kubectl --context k0s -n kube-system get secret vault-auth-token -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
      - vault write auth/kubernetes/k0s/config
          token_reviewer_jwt="$(kubectl -n kube-system get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d; echo)"
          kubernetes_host="https://{{.K0S_VIP_IP}}"
          kubernetes_ca_cert=@ca.crt
          disable_iss_validation=true
      - rm ca.crt
  add-roles:
    desc: add k8s roles/policies
    cmds:
      - echo "path \"secret/data/cluster/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write cluster-secrets -
      - echo "path \"secret/data/flux-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write flux-system -
      - vault write auth/kubernetes/k8s/role/flux-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=flux-system
          policies=cluster-secrets,flux-system,security,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/flux-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=flux-system
          policies=cluster-secrets,flux-system,security,default
          ttl=1440h
      - echo "path \"secret/data/database/*\" { capabilities = [\"read\", \"list\"] } " | vault policy write database -
      - vault write auth/kubernetes/k8s/role/database
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=database
          policies=volsync,database,media,home-automation,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/database
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=database
          policies=database,media,home-automation,default
          ttl=1440h
      - echo "path \"secret/data/home-automation/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation -
      - vault write auth/kubernetes/k8s/role/home-automation
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=home-automation
          policies=volsync,database,home-automation,default
          ttl=1440h
      - echo "path \"secret/data/media/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write media -
      - vault write auth/kubernetes/k8s/role/media
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=media
          policies=media,default
          ttl=1440h
      - echo "path \"secret/data/monitoring/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write monitoring -
      - vault write auth/kubernetes/k8s/role/monitoring
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=monitoring
          policies=monitoring,storage,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/monitoring
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=monitoring
          policies=monitoring,default
          ttl=1440h
      - echo -e "path \"pki/sign/default\" { capabilities = [\"update\"] }\npath \"secret/data/cert-manager/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write cert-manager -
      - vault write auth/kubernetes/k8s/role/cert-manager
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=cert-manager
          policies=cert-manager,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/cert-manager
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=cert-manager
          policies=cert-manager,default
          ttl=1440h
      - echo "path \"secret/data/kube-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write kube-system -
      - vault write auth/kubernetes/k8s/role/kube-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=kube-system
          policies=kube-system,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/kube-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=kube-system
          policies=kube-system,default
          ttl=1440h
      - echo "path \"secret/data/ingress/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write ingress -
      - vault write auth/kubernetes/k8s/role/ingress
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=ingress
          policies=ingress,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/ingress
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=ingress
          policies=ingress,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/ingress
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=ingress
          policies=ingress,default
          ttl=1440h
      - echo "path \"secret/data/volsync/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write volsync -
      - vault write auth/kubernetes/k8s/role/volsync
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=volsync
          policies=volsync,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/volsync
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=volsync
          policies=volsync,default
          ttl=1440h
      - echo "path \"secret/data/security/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write security -
      - vault write auth/kubernetes/k0s/role/security
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=security
          policies=security,default
          ttl=1440h
      - vault write auth/kubernetes/k8s/role/security
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=security
          policies=security,default
          ttl=1440h
      - echo "path \"secret/data/storage/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write storage -
      - vault write auth/kubernetes/k8s/role/storage
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=storage
          policies=security,storage,default
          ttl=1440h
      - vault write auth/kubernetes/k0s/role/storage
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=storage
          policies=security,storage,default
          ttl=1440h
      - echo "path \"secret/data/cluster/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write development -
      - echo "path \"secret/data/development/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write development -
      - vault write auth/kubernetes/k8s/role/development
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=development
          policies=development,default
          ttl=1440h
  # kv
  disable-kv:
    desc: disable kv secrets engine
    cmds:
      - vault secrets disable secret
  enable-kv:
    desc: enable kv secrets engine
    cmds:
      - vault secrets enable -path=secret kv-v2
  add-kv-secrets:
    desc: add kv secrets
    cmds:
      # shared secrets - k8s
      - vault kv put -mount=secret cluster/k8s
          CILIUM_ID="{{.K8S_CILIUM_ID}}"
          CILIUM_LB_IP="{{.K8S_CILIUM_LB_IP}}"
          CLOUDFLARE_EMAIL="{{.CLOUDFLARE_EMAIL}}"
          DOCKER_PRIVATE_REGISTRY="{{.DOCKER_PRIVATE_REGISTRY}}"
          DOMAIN="{{.K8S_DOMAIN}}"
          ENVIRONMENT="k8s"
          EMQX_LB_IP="{{.EMQX_LB_IP}}"
          SLACK_WEBHOOK="{{.SLACK_WEBHOOK}}"
          IPAM_CIDR="{{.K8S_IPAM_CIDR}}"
          LOCAL_DOMAIN="{{.LOCAL_DOMAIN}}"
          K0S_DOMAIN="{{.K0S_DOMAIN}}"
          LOKI_LB_IP="{{.K8S_LOKI_LB_IP}}"
          NGINX_LB_IP="{{.K8S_NGINX_LB_IP}}"
          RSYSLOG_LB_IP="{{.K8S_RSYSLOG_LB_IP}}"
          NFS_SERVER_IP="{{.NFS_SERVER_IP}}"
          SERVER_CIDR="{{.K8S_SERVER_CIDR}}"
          VAULT_ADDR="{{.VAULT_ADDR}}"
          VIP_IP="{{.K8S_VIP_IP}}"
          VIP_PORT="{{.VIP_PORT}}"
      # cert-manager
      - vault kv put -mount=secret cert-manager/cloudflare          
          CLOUDFLARE_TOKEN="{{.CLOUDFLARE_TOKEN}}"
      # coder
      - vault kv put -mount=secret development/coder
          CODER_POSTGRES_USER="{{.CODER_POSTGRES_USER}}"
          CODER_POSTGRES_PASSWORD="{{.CODER_POSTGRES_PASSWORD}}"
          CODER_POSTGRES_SUPER_USER="{{.CODER_POSTGRES_SUPER_USER}}"
          CODER_POSTGRES_SUPER_PASSWORD="{{.CODER_POSTGRES_SUPER_PASSWORD}}"
          CODER_DB_BACKUP_ACCESS_KEY="{{.CODER_DB_BACKUP_ACCESS_KEY}}"
          CODER_DB_BACKUP_SECRET="{{.CODER_DB_BACKUP_SECRET}}"
      # flux-system/notification
      - vault kv put -mount=secret flux-system/notification
          FLUX_SLACK_WEBHOOK="{{.SLACK_WEBHOOK}}"
      # flux-system/weave-gitops
      - vault kv put -mount=secret flux-system/weave-gitops
          ADMIN_PASSWORD="{{.ADMIN_PASSWORD}}"
      # database/emqx
      - vault kv put -mount=secret database/emqx
          admin_password="{{.EMQX_ADMIN_PASSWORD}}"
          user_1_username="{{.EMQX_USER1_NAME}}"
          user_1_password="{{.EMQX_USER1_PASSWORD}}"
      # database/influxdb
      - vault kv put -mount=secret database/influxdb
          influxdb-user="{{.INFLUXDB_USER}}"
          influxdb-password="{{.INFLUXDB_PASSWORD}}"
      # media/immich
      - vault kv put -mount=secret media/immich
          IMMICH_JWT_SECRET="{{.IMMICH_JWT_SECRET}}"
          IMMICH_TYPESENSE_API_KEY="{{.IMMICH_TYPESENSE_API_KEY}}"
          IMMICH_POSTGRES_SUPER_USER="{{.IMMICH_POSTGRES_SUPER_USER}}"
          IMMICH_POSTGRES_SUPER_PASSWORD="{{.IMMICH_POSTGRES_SUPER_PASSWORD}}"
          IMMICH_POSTGRES_USER="{{.IMMICH_POSTGRES_USER}}"
          IMMICH_POSTGRES_PASSWORD="{{.IMMICH_POSTGRES_PASSWORD}}"
          IMMICH_DB_BACKUP_ACCESS_KEY="{{.IMMICH_DB_BACKUP_ACCESS_KEY}}"
          IMMICH_DB_BACKUP_SECRET="{{.IMMICH_DB_BACKUP_SECRET}}"
      # media/miniflux
      - vault kv put -mount=secret media/miniflux
          MINIFLUX_ADMIN_USERNAME="{{.MINIFLUX_ADMIN_USERNAME}}"
          MINIFLUX_ADMIN_PASSWORD="{{.MINIFLUX_ADMIN_PASSWORD}}"
          MINIFLUX_POSTGRES_SUPER_USER="{{.MINIFLUX_POSTGRES_SUPER_USER}}"
          MINIFLUX_POSTGRES_SUPER_PASSWORD="{{.MINIFLUX_POSTGRES_SUPER_PASSWORD}}"
          MINIFLUX_POSTGRES_USER="{{.MINIFLUX_POSTGRES_USER}}"
          MINIFLUX_POSTGRES_PASSWORD="{{.MINIFLUX_POSTGRES_PASSWORD}}"
          MINIFLUX_DB_BACKUP_ACCESS_KEY="{{.MINIFLUX_DB_BACKUP_ACCESS_KEY}}"
          MINIFLUX_DB_BACKUP_SECRET="{{.MINIFLUX_DB_BACKUP_SECRET}}"
      # home-automation/home-assistant
      - vault kv put -mount=secret home-automation/home-assistant
          HASS_POSTGRES_SUPER_USER="{{.HASS_POSTGRES_SUPER_USER}}"
          HASS_POSTGRES_SUPER_PASSWORD="{{.HASS_POSTGRES_SUPER_PASSWORD}}"
          HASS_POSTGRES_USER="{{.HASS_POSTGRES_USER}}"
          HASS_POSTGRES_PASSWORD="{{.HASS_POSTGRES_PASSWORD}}"
          HASS_DB_BACKUP_ACCESS_KEY="{{.HASS_DB_BACKUP_ACCESS_KEY}}"
          HASS_DB_BACKUP_SECRET="{{.HASS_DB_BACKUP_SECRET}}"
          ALARM_CODE="{{.HASS_ALARM_CODE}}"
          GIT_REPO="{{.HASS_GIT_REPO}}"
          DEPLOY_KEY_B64="{{.HASS_DEPLOY_KEY_B64}}"
          HACS_TOKEN="{{.HASS_HACS_TOKEN}}"
          LDAP_ROOT="{{.HASS_LDAP_ROOT}}"
          LOCAL_DOMAIN="{{.LOCAL_DOMAIN}}"
          LOCATION_LAT="{{.HASS_LOCATION_LAT}}"
          LOCATION_LONG="{{.HASS_LOCATION_LONG}}"
          DRAC_IP="{{.HASS_DRAC_IP}}"
      # home-automation/frigate
      - vault kv put -mount=secret home-automation/frigate
          DVR_URL="{{.FRIGATE_DVR_URL}}"
          CAM1_NAME="{{.FRIGATE_CAM1_NAME}}"
          CAM1_ID="{{.FRIGATE_CAM1_ID}}"
          CAM2_NAME="{{.FRIGATE_CAM2_NAME}}"
          CAM2_ID="{{.FRIGATE_CAM2_ID}}"
          CAM3_NAME="{{.FRIGATE_CAM3_NAME}}"
          CAM3_ID="{{.FRIGATE_CAM3_ID}}"
          CAM4_NAME="{{.FRIGATE_CAM4_NAME}}"
          CAM4_ID="{{.FRIGATE_CAM4_ID}}"
          CAM5_NAME="{{.FRIGATE_CAM5_NAME}}"
          CAM5_ID="{{.FRIGATE_CAM5_ID}}"
          CAM6_NAME="{{.FRIGATE_CAM6_NAME}}"
          CAM6_ID="{{.FRIGATE_CAM6_ID}}"
          CAM7_NAME="{{.FRIGATE_CAM7_NAME}}"
          CAM7_ID="{{.FRIGATE_CAM7_ID}}"
          CAM8_NAME="{{.FRIGATE_CAM8_NAME}}"
          CAM8_ID="{{.FRIGATE_CAM8_ID}}"
          PLUS_API_KEY="{{.FRIGATE_PLUS_API_KEY}}"
      # home-automation/rtlamr-collect
      - vault kv put -mount=secret home-automation/rtlamr-collect
          RTLAMR_METERS="{{.RTLAMR_METERS}}"
          RTLAMR_MSGTYPE="{{.RTLAMR_MSGTYPE}}"
      # home-automation/tidbyt-proxy
      - vault kv put -mount=secret home-automation/tidbyt-proxy
          TIDBYT_API_KEY="{{.TIDBYT_API_KEY}}"
          TIDBYT_DEVICE_ID="{{.TIDBYT_DEVICE_ID}}"
      # home-automation/unifi-downloader
      - vault kv put -mount=secret home-automation/unifi-downloader
          UNIFI_DOWNLOADER_HOST="{{.UNIFI_DOWNLOADER_HOST}}"
          UNIFI_DOWNLOADER_USERNAME="{{.UNIFI_DOWNLOADER_USERNAME}}"
          UNIFI_DOWNLOADER_PASSWORD="{{.UNIFI_DOWNLOADER_PASSWORD}}"
      # ingress/cloudflare
      - vault kv put -mount=secret ingress/cloudflare
          CLOUDFLARE_EMAIL="{{.CLOUDFLARE_EMAIL}}"
          CLOUDFLARE_TOKEN="{{.CLOUDFLARE_TOKEN}}"
          CLOUDFLARE_RECORD_NAME="{{.CLOUDFLARE_RECORD_NAME}}"
      # monitoring/loki
      - vault kv put -mount=secret monitoring/loki
          BASIC_AUTH="{{.LOKI_BASIC_AUTH}}"
          LOKI_USERNAME="{{.LOKI_USERNAME}}"
          LOKI_PASSWORD="{{.LOKI_PASSWORD}}"
      # monitoring/gatus
      - vault kv put -mount=secret monitoring/gatus
          GATUS_POSTGRES_SUPER_USER="{{.GATUS_POSTGRES_SUPER_USER}}"
          GATUS_POSTGRES_SUPER_PASSWORD="{{.GATUS_POSTGRES_SUPER_PASSWORD}}"
          GATUS_POSTGRES_USER="{{.GATUS_POSTGRES_USER}}"
          GATUS_POSTGRES_PASSWORD="{{.GATUS_POSTGRES_PASSWORD}}"
          GATUS_DB_BACKUP_ACCESS_KEY="{{.GATUS_DB_BACKUP_ACCESS_KEY}}"
          GATUS_DB_BACKUP_SECRET="{{.GATUS_DB_BACKUP_SECRET}}"
          GATUS_SLACK_WEBHOOK_URL="{{.SLACK_WEBHOOK}}"
          GATUS_DOMAIN="{{.GATUS_DOMAIN}}"
      # monitoring/grafana
      - vault kv put -mount=secret monitoring/grafana
          ADMIN_USER="{{.GRAFANA_ADMIN_USER}}"
          ADMIN_PASSWORD="{{.GRAFANA_ADMIN_PASSWORD}}"
          LDAP_USERNAME="{{.GRAFANA_LDAP_USERNAME}}"
          LDAP_PASSWORD="{{.GRAFANA_LDAP_PASSWORD}}"
          LDAP_ROOT="{{.GRAFANA_LDAP_ROOT}}"
# security/dex
      - vault kv put -mount=secret security/dex
          IMMICH_CLIENT_SECRET="{{.DEX_IMMICH_CLIENT_SECRET}}"
          GITOPS_CLIENT_SECRET="{{.DEX_GITOPS_CLIENT_SECRET}}"
      # security/lldap
      - vault kv put -mount=secret security/lldap
          LLDAP_POSTGRES_SUPER_USER="{{.LLDAP_POSTGRES_SUPER_USER}}"
          LLDAP_POSTGRES_SUPER_PASSWORD="{{.LLDAP_POSTGRES_SUPER_PASSWORD}}"
          LLDAP_POSTGRES_USER="{{.LLDAP_POSTGRES_USER}}"
          LLDAP_POSTGRES_PASSWORD="{{.LLDAP_POSTGRES_PASSWORD}}"
          LLDAP_DB_BACKUP_ACCESS_KEY="{{.LLDAP_DB_BACKUP_ACCESS_KEY}}"
          LLDAP_DB_BACKUP_SECRET="{{.LLDAP_DB_BACKUP_SECRET}}"
          LLDAP_JWT_SECRET="{{.LLDAP_JWT_SECRET}}"
          LLDAP_LDAP_USER_EMAIL="{{.LLDAP_LDAP_USER_EMAIL}}"
          LLDAP_LDAP_USER_PASS="{{.LLDAP_LDAP_USER_PASS}}"
          LLDAP_SERVER_KEY_SEED="{{.LLDAP_SERVER_KEY_SEED}}"
          LLDAP_LDAP_BASE_DN="{{.LLDAP_LDAP_BASE_DN}}"
      # security/oauth2-proxy
      - vault kv put -mount=secret security/oauth2-proxy
          OAUTH2_CLIENT_SECRET="{{.OAUTH2_CLIENT_SECRET}}"
          OAUTH2_COOKIE_SECRET="{{.OAUTH2_COOKIE_SECRET}}"
      # storage/minio
      - vault kv put -mount=secret storage/minio
          ROOT_USER="{{.MINIO_ROOT_USER}}"
          ROOT_PASSWORD="{{.MINIO_ROOT_PASSWORD}}"
          CONSOLE_SECRET_KEY="{{.MINIO_CONSOLE_SECRET_KEY}}"
          CONSOLE_ACCESS_KEY="{{.MINIO_CONSOLE_ACCESS_KEY}}"
      # volsync
      - vault kv put -mount=secret volsync/volsync
          RESTIC_URL="{{.RESTIC_URL}}"
      - vault kv put -mount=secret volsync/esphome
          RESTIC_ESPHOME_PASSWORD="{{.RESTIC_ESPHOME_PASSWORD}}"
      - vault kv put -mount=secret volsync/frigate
          RESTIC_FRIGATE_PASSWORD="{{.RESTIC_FRIGATE_PASSWORD}}"
      - vault kv put -mount=secret volsync/immich
          RESTIC_IMMICH_PASSWORD="{{.RESTIC_IMMICH_PASSWORD}}"
      - vault kv put -mount=secret volsync/influxdb
          RESTIC_INFLUXDB_PASSWORD="{{.RESTIC_INFLUXDB_PASSWORD}}"
      - vault kv put -mount=secret volsync/home-assistant
          RESTIC_HASS_PASSWORD="{{.RESTIC_HASS_PASSWORD}}"
      - vault kv put -mount=secret volsync/zwavejs
          RESTIC_ZWAVEJS_PASSWORD="{{.RESTIC_ZWAVEJS_PASSWORD}}"