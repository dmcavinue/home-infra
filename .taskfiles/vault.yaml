---
version: '3'

tasks:
  bootstrap:
    desc: bootstrap auth/roles
    cmds:
      - task vault:disable-k8s-auth
      - task vault:enable-k8s-auth
      - task vault:add-k8s-roles
  status:
    desc: vault status
    cmds:
      - vault status
  unseal:
    desc: vault unseal
    cmds:
      - vault operator unseal {{.VAULT_UNSEAL_KEY_1}}
      - vault operator unseal {{.VAULT_UNSEAL_KEY_2}}
      - vault operator unseal {{.VAULT_UNSEAL_KEY_3}}
  # ldap
  enable-ldap:
    desc: configure vault ldap auth
    cmds:
      - vault auth disable ldap
      - vault auth enable ldap
      - vault write auth/ldap/config
          url="ldaps://{{.LDAP_SERVER}}"
          userattr=uid
          userdn="cn=users,{{.LDAP_ROOT}}"
          discoverdn=true
          groupdn="cn=groups,{{.LDAP_ROOT}}"
          groupfilter='(&(objectClass=posixGroup)(memberUid={{printf "{{.Username}}"}}))'
          groupattr="uid"
          binddn="uid={{.LDAP_ADMIN_USERNAME}},cn=users,{{.LDAP_ROOT}}"
          bindpass="{{.LDAP_ADMIN_PASSWORD}}"
          insecure_tls=false
          starttls=true
      - vault write auth/ldap/groups/vault-admin policies=admin
      - vault policy write admin {{.ROOT_DIR}}/tmpl/vault-admin.hcl
  # k8s auth
  enable-k8s-auth:
    desc: configure vault k8s auth for cluster
    cmds:
      - vault auth enable -path=kubernetes/{{.ENVIRONMENT}} kubernetes
      - kubectl -n kube-system apply -f {{.ROOT_DIR}}/kubernetes/templates/vault-auth.yaml
      - kubectl -n kube-system get secret vault-auth-token -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/config
          token_reviewer_jwt="$(kubectl -n kube-system get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d; echo)"
          kubernetes_host="https://{{.VIP_IP}}"
          kubernetes_ca_cert=@ca.crt
          disable_iss_validation=true
      - rm ca.crt
  disable-k8s-auth:
    desc: disable k8s auth
    cmds:
      - vault auth disable kubernetes/{{.ENVIRONMENT}}
  add-k8s-roles:
    desc: add k8s roles/policies
    cmds:
      - echo "path \"kv/data/cluster/{{.ENVIRONMENT}}\" { capabilities = [\"read\", \"list\"] }" | vault policy write cluster-secrets -
      - echo "path \"kv/data/flux-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write flux-system -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/flux-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=flux-system
          policies=cluster-secrets,flux-system,default
          ttl=1440h
      - echo "path \"kv/data/database/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write database -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/database
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=database
          policies=database,default
          ttl=1440h
      - echo "path \"kv/data/home-automation/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=home-automation
          policies=home-automation,default
          ttl=1440h
      - echo "path \"kv/data/media/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write media -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/media
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=media
          policies=media,default
          ttl=1440h
      - echo "path \"kv/data/monitoring/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write monitoring -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/monitoring
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=monitoring
          policies=monitoring,default
          ttl=1440h
      - echo "path \"kv/data/cert-manager/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write cert-manager -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/cert-manager
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=cert-manager
          policies=cert-manager,default
          ttl=1440h
      - echo "path \"kv/data/kube-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write kube-system -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/kube-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=kube-system
          policies=kube-system,default
          ttl=1440h
  # database
  disable-database-engine:
    desc: disable vault database engine
    cmds:
      - vault secrets disable databases/{{.ENVIRONMENT}}
  enable-database-engine:
    desc: enable vault database engine
    cmds:
      - vault secrets enable -path=databases/{{.ENVIRONMENT}} database
  add-database-connections:
    desc: add vault database connections
    cmds:
      # postgresql/home_assistant
      - vault write databases/{{.ENVIRONMENT}}/config/home_assistant
          plugin_name="postgresql-database-plugin"
          allowed_roles="home-assistant"
          connection_url="postgresql://{{`{{username}}`}}:{{`{{password}}`}}@{{.POSTGRES_LB_IP}}:5432/home_assistant"
          username="postgres"
          password="{{.POSTGRES_PASSWORD}}"
          username_template="{{`{{.RoleName}}`}}-{{`{{random 8}}`}}"
      - vault write databases/{{.ENVIRONMENT}}/roles/home-assistant
          db_name="home_assistant"
          creation_statements="CREATE ROLE \"{{`{{name}}`}}\" WITH LOGIN PASSWORD '{{`{{password}}`}}' VALID UNTIL '{{`{{expiration}}`}}'; GRANT role_home_assistant TO \"{{`{{name}}`}}\"; SET ROLE role_home_assistant;"
          revocation_statements="REVOKE role_home_assistant FROM \"{{`{{name}}`}}\"; DROP ROLE \"{{`{{name}}`}}\";"
          default_ttl="1h"
          max_ttl="1h"
      # postgresql/immich
      - vault write databases/{{.ENVIRONMENT}}/config/immich
          plugin_name="postgresql-database-plugin"
          allowed_roles="immich"
          connection_url="postgresql://{{`{{username}}`}}:{{`{{password}}`}}@{{.POSTGRES_LB_IP}}:5432/immich"
          username="postgres"
          password="{{.POSTGRES_PASSWORD}}"
          username_template="{{`{{.RoleName}}`}}-{{`{{random 8}}`}}"
      - vault write databases/{{.ENVIRONMENT}}/roles/immich
          db_name="immich"
          creation_statements="CREATE ROLE \"{{`{{name}}`}}\" WITH LOGIN PASSWORD '{{`{{password}}`}}' VALID UNTIL '{{`{{expiration}}`}}';, GRANT role_immich TO \"{{`{{name}}`}}\"; SET ROLE role_immich;"
          revocation_statements="REVOKE role_immich FROM \"{{`{{name}}`}}\"; DROP ROLE \"{{`{{name}}`}}\";"
          default_ttl="1h"
          max_ttl="1h"
      # postgresql/windmill
      - vault write databases/{{.ENVIRONMENT}}/config/windmill
          plugin_name="postgresql-database-plugin"
          allowed_roles="windmill"
          connection_url="postgresql://{{`{{username}}`}}:{{`{{password}}`}}@{{.POSTGRES_LB_IP}}:5432/windmill"
          username="postgres"
          password="{{.POSTGRES_PASSWORD}}"
          username_template="{{`{{.RoleName}}`}}-{{`{{random 8}}`}}"
      - vault write databases/{{.ENVIRONMENT}}/roles/windmill
          db_name="windmill"
          creation_statements="CREATE ROLE \"{{`{{name}}`}}\" WITH LOGIN PASSWORD '{{`{{password}}`}}' VALID UNTIL '{{`{{expiration}}`}}'; GRANT role_windmill TO \"{{`{{name}}`}}\"; SET ROLE role_windmill;"
          revocation_statements="REVOKE role_windmill FROM \"{{`{{name}}`}}\"; DROP ROLE \"{{`{{name}}`}}\";"
          default_ttl="1h"
          max_ttl="1h"
  # kv
  disable-kv:
    desc: disable kv secrets engine
    cmds:
      - vault secrets disable kv/
      - vault policy delete databases-postgresql
      - vault policy delete default-demo
  enable-kv:
    desc: enable kv secrets engine
    cmds:
      - vault secrets enable -path=kv/ kv-v2
  add-kv-secrets:
    desc: add kv secrets
    cmds:
      # shared secrets
      - vault kv put -mount=kv cluster/{{.ENVIRONMENT}}
          CLOUDFLARE_EMAIL="${CLOUDFLARE_EMAIL}"
          DOMAIN="${DOMAIN}"
          DOCKER_PRIVATE_REGISTRY="${DOCKER_PRIVATE_REGISTRY}"
          ENVIRONMENT="${ENVIRONMENT}"
          EMQX_LB_IP="${EMQX_LB_IP}"
          POSTGRES_LB_IP="${POSTGRES_LB_IP}"
          LOCAL_DOMAIN="${LOCAL_DOMAIN}"
          SERVER_CIDR="${SERVER_CIDR}"
          VIP_IP="${VIP_IP}"
          VIP_PORT="${VIP_PORT}"
      # cert-manager
      - vault kv put -mount=kv/ cert-manager/cloudflare          
          CLOUDFLARE_TOKEN="${CLOUDFLARE_TOKEN}"
      # flux-system
      - vault kv put -mount=kv/ flux-system/notification
          FLUX_SLACK_WEBHOOK="${FLUX_SLACK_WEBHOOK}"
      # database/emqx
      - vault kv put -mount=kv/ database/emqx
          admin_password="{{.EMQX_ADMIN_PASSWORD}}"
          user_1_username="{{.EMQX_USER1_NAME}}"
          user_1_password="{{.EMQX_USER1_PASSWORD}}"
      # database/cloudnative-pg
      - vault kv put -mount=kv/ database/cloudnative-pg
          POSTGRES_SUPER_USER="{{.POSTGRES_SUPER_USER}}"
          POSTGRES_SUPER_PASS="{{.POSTGRES_SUPER_PASS}}"
          POSTGRES_HASS_USER="{{.POSTGRES_HASS_USER}}"
          POSTGRES_HASS_PASS="{{.POSTGRES_HASS_PASS}}"
          POSTGRES_IMMICH_USER="{{.POSTGRES_IMMICH_USER}}"
          POSTGRES_IMMICH_PASS="{{.POSTGRES_IMMICH_PASS}}"

      # databases/postgresql
      - vault kv put -mount=kv/ databases/postgresql
          POSTGRES_PASSWORD="{{.POSTGRES_PASSWORD}}"
      - echo "path \"kv/data/databases/postgresql\" { capabilities = [\"read\", \"list\"] }" | vault policy write databases-postgresql -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/databases-postgresql
          bound_service_account_names=postgresql
          bound_service_account_namespaces=databases
          policies=databases-postgresql,pki-issuer,default
          ttl=1440h
      # home-automation/frigate
      - vault kv put -mount=kv/ home-automation/frigate
          DVR_URL="{{.FRIGATE_DVR_URL}}"
          CAM1_NAME="{{.FRIGATE_CAM1_NAME}}"
          CAM1_ID="{{.FRIGATE_CAM1_ID}}"
          CAM2_NAME="{{.FRIGATE_CAM2_NAME}}"
          CAM2_ID="{{.FRIGATE_CAM2_ID}}"
          CAM3_NAME="{{.FRIGATE_CAM3_NAME}}"
          CAM3_ID="{{.FRIGATE_CAM3_ID}}"
          CAM4_NAME="{{.FRIGATE_CAM4_NAME}}"
          CAM4_ID="{{.FRIGATE_CAM4_ID}}"
          CAM5_NAME="{{.FRIGATE_CAM5_NAME}}"
          CAM5_ID="{{.FRIGATE_CAM5_ID}}"
          CAM6_NAME="{{.FRIGATE_CAM6_NAME}}"
          CAM6_ID="{{.FRIGATE_CAM6_ID}}"
          CAM7_NAME="{{.FRIGATE_CAM7_NAME}}"
          CAM7_ID="{{.FRIGATE_CAM7_ID}}"
          CAM8_NAME="{{.FRIGATE_CAM8_NAME}}"
          CAM8_ID="{{.FRIGATE_CAM8_ID}}"
          CAM9_NAME="{{.FRIGATE_CAM9_NAME}}"
          CAM9_ID="{{.FRIGATE_CAM9_ID}}"
          MQTT_USERNAME="mqtt"
          MQTT_PASSWORD="{{.MQTT_PWD}}"
      - echo "path \"kv/data/home-automation/frigate\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation-frigate -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation-frigate
          bound_service_account_names=frigate
          bound_service_account_namespaces=home-automation
          policies=home-automation-frigate,default
          ttl=1440h
      # home-automation/home-assistant
      - vault kv put -mount=kv/ home-automation/home-assistant
          ALARM_CODE="${HASS_ALARM_CODE}"
          GIT_REPO="${HASS_GIT_REPO}"
          DEPLOY_KEY_B64="${HASS_DEPLOY_KEY_B64}"
          HACS_TOKEN="${HASS_HACS_TOKEN}"
          LDAP_ROOT="${LDAP_ROOT}"
          LOCAL_DOMAIN="${LOCAL_DOMAIN}"
          LOCATION_LAT="${HASS_LOCATION_LAT}"
          LOCATION_LONG="${HASS_LOCATION_LONG}"
          POSTGRES_USER="${HASS_POSTGRES_USER}"
          POSTGRES_PASSWORD="${HASS_POSTGRES_PASSWORD}"
      - echo -e "path \"sys/renew\" { capabilities = [\"update\"] }\npath \"kv/data/home-automation/home-assistant\" { capabilities = [\"read\", \"list\"] }\npath \"databases/{{.ENVIRONMENT}}/creds/home-assistant\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation-home-assistant -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation-home-assistant
          bound_service_account_names=home-assistant
          bound_service_account_namespaces=home-automation
          policies=home-automation-home-assistant,default
          ttl=1440h
      # home-automation/mosquitto
      - vault kv put -mount=kv/ home-automation/mosquitto
          MQTT_LB_IP="${MQTT_LB_IP}"
          MQTT_USERNAME="${MQTT_USERNAME}"
          MQTT_PASSWORD="${MQTT_PASSWORD}"
      - echo "path \"kv/data/home-automation/mosquitto\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation-mosquitto -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation-mosquitto
          bound_service_account_names=mosquitto
          bound_service_account_namespaces=home-automation
          policies=home-automation-mosquitto,default
          ttl=1440h
      # home-automation/rtlamr-collect
      - vault kv put -mount=kv/ home-automation/rtlamr-collect
          RTLAMR_METERS="${RTLAMR_METERS}"
          RTLAMR_MSGTYPE="${RTLAMR_MSGTYPE}"
          INFLUXDB_USER="${INFLUXDB_USER}"
          INFLUXDB_PASSWORD="${INFLUXDB_PASSWORD}"
      - echo "path \"kv/data/home-automation/rtlamr-collect\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation-rtlamr-collect -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation-rtlamr-collect
          bound_service_account_names=rtlamr-collect
          bound_service_account_namespaces=home-automation
          policies=home-automation-rtlamr-collect,default
          ttl=1440h
      # home-automation/tidbyt-proxy
      - vault kv put -mount=kv/ home-automation/tidbyt-proxy
          TIDBYT_API_KEY="${TIDBYT_API_KEY}"
          TIDBYT_DEVICE_ID="${TIDBYT_DEVICE_ID}"
      - echo "path \"kv/data/home-automation/tidbyt-proxy\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation-tidbyt-proxy -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation-tidbyt-proxy
          bound_service_account_names=tidbyt-proxy
          bound_service_account_namespaces=home-automation
          policies=home-automation-tidbyt-proxy,default
          ttl=1440h
      # home-automation/unifi-downloader
      - vault kv put -mount=kv/ home-automation/unifi-downloader
          UNIFI_DOWNLOADER_HOST="${UNIFI_DOWNLOADER_HOST}"
          UNIFI_DOWNLOADER_USERNAME="${UNIFI_DOWNLOADER_USERNAME}"
          UNIFI_DOWNLOADER_PASSWORD="${UNIFI_DOWNLOADER_PASSWORD}"
      - echo "path \"kv/data/home-automation/unifi-downloader\" { capabilities = [\"read\", \"list\"] }" | vault policy write home-automation-unifi-downloader -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/home-automation-unifi-downloader
          bound_service_account_names=unifi-downloader
          bound_service_account_namespaces=home-automation
          policies=home-automation-unifi-downloader,default
          ttl=1440h
      # media/immich
      - vault kv put -mount=kv/ media/immich
          IMMICH_POSTGRES_USER="${IMMICH_POSTGRES_USER}"
          IMMICH_POSTGRES_PASSWORD="${IMMICH_POSTGRES_PASSWORD}"
          IMMICH_POSTGRES_DATABASE="${IMMICH_POSTGRES_DATABASE}"
          IMMICH_JWT_SECRET="${IMMICH_JWT_SECRET}"
          IMMICH_TYPESENSE_API_KEY="${IMMICH_TYPESENSE_API_KEY}"
      - echo -e "path \"kv/data/media/immich\" { capabilities = [\"read\", \"list\"] }\npath \"databases/{{.ENVIRONMENT}}/creds/immich\" { capabilities = [\"read\", \"list\"] }" | vault policy write media-immich -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/media-immich
          bound_service_account_names=immich
          bound_service_account_namespaces=media
          policies=media-immich,default
          ttl=1440h
      # media/typesense
      - vault kv put -mount=kv/ media/typesense
          IMMICH_TYPESENSE_API_KEY="${IMMICH_TYPESENSE_API_KEY}"
      - echo "path \"kv/data/media/typesense\" { capabilities = [\"read\", \"list\"] }" | vault policy write media-typesense -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/media-typesense
          bound_service_account_names=typesense
          bound_service_account_namespaces=media
          policies=media-typesense,default
          ttl=1440h
      # observability/grafana
      - vault kv put -mount=kv/ observability/grafana
          LDAP_SERVER="${LDAP_SERVER}"
          LDAP_ADMIN_USERNAME="${LDAP_ADMIN_USERNAME}"
          LDAP_ADMIN_PASSWORD="${LDAP_ADMIN_PASSWORD}"
          LDAP_ROOT="${LDAP_ROOT}"
      - echo "path \"kv/data/observability/grafana\" { capabilities = [\"read\", \"list\"] }" | vault policy write observability-grafana -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/observability-grafana
          bound_service_account_names=grafana
          bound_service_account_namespaces=observability
          policies=observability-grafana,default
          ttl=1440h
      # observability/influxdb
      - vault kv put -mount=kv/ observability/influxdb
          INFLUXDB_USER="${INFLUXDB_USER}"
          INFLUXDB_PASSWORD="${INFLUXDB_PASSWORD}"
      - echo "path \"kv/data/observability/influxdb\" { capabilities = [\"read\", \"list\"] }" | vault policy write observability-influxdb -
      - vault write auth/kubernetes/{{.ENVIRONMENT}}/role/observability-influxdb
          bound_service_account_names=influxdb
          bound_service_account_namespaces=observability
          policies=observability-influxdb,default
          ttl=1440h
