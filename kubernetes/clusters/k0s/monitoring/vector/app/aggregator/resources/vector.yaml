---
data_dir: /vector-data-dir
api:
  enabled: true
  address: 0.0.0.0:8686

#
# Sources
#

sources:
  vector_metrics:
    type: internal_metrics
    scrape_interval_secs: 10

  journald_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6000

  kubernetes_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6010

  unifi_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6020

  mikrotik_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6030

#
# Transforms
#

transforms:
  kubernetes_remap:
    type: remap
    inputs: ["kubernetes_source"]
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
      # Drop pod_labels
      del(.pod_labels)

  unifi_route:
    type: route
    inputs: ["unifi_source"]
    route:
      firewall: |
        .file == "/logs/udm/ulog/syslogemu.log" && match!(.message, r'^[a-zA-Z0-9 :-]+\[(.*?)\].(.*)')
      auth: |
        .file == "/logs/udm/auth.log"
      bash_history: |
        .file == "/logs/udm/bash_history.log"
      protect_client_notify: |
        .file == "/logs/unifi-protect/clientnotify.log"

  unifi_firewall_remap:
    type: remap
    inputs: ["unifi_route.firewall"]
    source: |
      # Parse firewall rule message
      split_message, split_err = parse_regex(.message, r'^[a-zA-Z0-9 :-]+\[(?P<RULE>.*?)\](?P<fields>.*)')
      if split_err != null {
          abort
      }
      # Extract separate fields from message
      split_message.fields, split_err = strip_whitespace(split_message.fields)
      if split_err != null {
          abort
      }
      .message, parse_err = parse_key_value(split_message.fields, whitespace: "strict")
      if parse_err != null {
          abort
      }

  journald_route:
    type: route
    inputs: ["journald_source"]
    route:
      coredns: |
        ._COMM == "coredns"

  coredns_remap:
    type: remap
    inputs: ["journald_route.coredns"]
    source: |
      ts = .timestamp
      log,parse_err = parse_regex(.message,r'\[(?P<level>[^]]+)]\s(?P<server_addr>[^:]+):(?P<server_port>\S+)\s+-\s+(?P<id>\S+)\s+"(?P<type>\S+)\s+(?P<class>\S+)\s+(?P<name>\S+)\s+(?P<proto>\S+)\s+(?P<size>\S+)\s+(?P<do>\S+)\s+(?P<bufsize>[^"]+)"\s+(?P<rcode>\S+)\s+(?P<rflags>\S+)\s+(?P<rsize>\S+)\s+(?P<duration>[\d\.]+).*')
      if parse_err != null {
          abort
      }
      . = log
      # add timestamp
      .timestamp = ts
      # cleanup unused fields
      del(.do)

#
# Sinks
#

sinks:
  prom-exporter:
    type: prometheus_exporter
    inputs:
      - vector_metrics
    address: 0.0.0.0:9598

  journald:
    inputs: ["journald_source"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'

  kubernetes:
    inputs: ["kubernetes_remap"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: '{{ custom_app_name }}'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'

  unifi:
    inputs: ["unifi_firewall_remap"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: false
    remove_timestamp: true
    labels:
      app: 'unifi-firewall'
      interface_in: '{{ message.IN }}'
      interface_out: '{{ message.OUT }}'
      protocol: '{{ message.PROTO }}'
      description: '{{ message.DESCR }}'
      source_ip: '{{ message.SRC }}'
      source_port: '{{ message.SPT }}'
      dest_ip: '{{ message.DST }}'
      dest_port: '{{ message.DPT }}'

  mikrotik:
    inputs: ["mikrotik_source"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: false
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'

  auth:
    inputs: ["unifi_route.auth"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: false
    remove_timestamp: true
    labels:
      app: 'unifi-auth'

  bash_history:
    inputs: ["unifi_route.bash_history"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: false
    remove_timestamp: true
    labels:
      app: 'unifi-bash-history'

  protect_client_notify:
    inputs: ["unifi_route.protect_client_notify"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: false
    remove_timestamp: true
    labels:
      app: 'unifi-protect-clientnotify'

  coredns_requests:
    inputs: ["coredns_remap"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: false
    remove_timestamp: false
    labels:
      app: 'unifi-coredns'
      name: '{{ .name }}'
      type: '{{ .type }}'
      server_addr: '{{ .server_addr }}'