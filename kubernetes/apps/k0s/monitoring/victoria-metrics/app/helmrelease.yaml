---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: victoria-metrics
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      version: 0.18.8
      sourceRef:
        kind: HelmRepository
        name: victoria-metrics
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: local-path-provisioner
      namespace: kube-system
  values:
    fullnameOverride: victoria-metrics
    victoria-metrics-operator:
      enabled: true
      operator:
        disable_prometheus_converter: false
        enable_converter_ownership: true
    vmcluster:
      enabled: true
      spec:
        retentionPeriod: "1"
        extraArgs:
          dedup.minScrapeInterval: 60s
        replicationFactor: 1
        vmstorage:
          replicaCount: 1
          extraArgs:
            dedup.minScrapeInterval: 60s
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: local-path
                resources:
                  requests:
                    storage: 20Gi
          resources:
            requests:
              cpu: "50m"
              memory: "100M"
        vmselect:
          replicaCount: 2
          cacheMountPath: /select-cache
          extraArgs:
            dedup.minScrapeInterval: 60s
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName:  local-path
                resources:
                  requests:
                    storage: 2Gi
        vminsert:
          replicaCount: 2
          extraArgs:
            maxLabelsPerTimeseries: "180" # More needed if you are scraping a LOT of stuff and having issues
          serviceSpec:
            metadata:
              annotations:
                io.cilium/global-service: true
      ingress:
        storage:
          enabled: false
          ingressClassName: nginx
          pathType: Prefix
          hosts:
            - &hoststorage vmetrics.${DOMAIN}
          tls:
            - hosts:
                - *hoststorage
        select:
          enabled: false
          ingressClassName: nginx
          pathType: Prefix
          hosts:
            - &hostselect vmselect.${DOMAIN}
          tls:
            - hosts:
                - *hostselect
        insert:
          enabled: true
          ingressClassName: nginx
          pathType: Prefix
          hosts:
            - &hostinsert vminsert.${DOMAIN}
          tls:
            - hosts:
                - *hostinsert
    vmalert:
      enabled: true
      spec:
        externalLabels:
          k8s_cluster: ${ENVIRONMENT}
        evaluationInterval: 60s
        notifiers:
          - selector:
              namespaceSelector:
                matchNames: ["monitoring"]
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: victoria-metrics-k8s-stack
      ingress:
        enabled: false
        ingressClassName: nginx
        pathType: Prefix
        hosts:
          - &hostalert vmalert.${DOMAIN}
        tls:
          - hosts:
              - *hostalert
    vmagent:
      enabled: true
      spec:
        podMetadata:
          annotations:
            vault.hashicorp.com/agent-inject: 'true'
            vault.hashicorp.com/agent-inject-token: 'true'
            vault.hashicorp.com/role: monitoring
        inlineScrapeConfig: |
          - job_name: vault
            metrics_path: /v1/sys/metrics
            params:
              format: ['prometheus']
            scheme: https
            authorization:
              credentials_file: /vault/secrets/token
            static_configs:
              - targets: ["vault.${DOMAIN}"]
        replicaCount: 1
        scrapeInterval: 60s
        externalLabels:
          cluster: ${ENVIRONMENT}
      ingress:
        enabled: false
        ingressClassName: nginx
        pathType: Prefix
        hosts:
          - &hostagent vmagent.${DOMAIN}
        tls:
          - hosts:
              - *hostagent
    vmsingle:
      enabled: false
    monzoTemplate:
      enabled: false
    defaultRules:
      create: true
      rules:
        etcd: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: true
        kubeStateMetrics: true
        network: true
        node: true
        vmagent: true
        vmsingle: true
        vmhealth: true
        alertmanager: true
    alertmanager:
      enabled: true
      spec:
        selectAllByDefault: true
        externalURL: "https://alertmanager.${DOMAIN}"
        routePrefix: /
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "slack"
            slack_configs:
              - channel: "#prometheus-alerts"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}} 
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 1m
          group_interval: 10m
          repeat_interval: 12h
          receiver: slack
          routes:
            - receiver: "null" # quote
              matchers:
                - alertname =~ "InfoInhibitor"
            - receiver: "slack"
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        ingressClassName: nginx
        pathType: Prefix
        hosts:
          - &hostalert alertmanager.${DOMAIN}
        tls:
          - hosts:
              - *hostalert
      alertmanagerSpec:
        externalUrl: "https://alertmanager.${DOMAIN}"
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        datasources:
          enabled: false
        dashboards:
          label: grafana_dashboard
          multicluster: true
    prometheus-node-exporter:
      enabled: true
    kube-state-metrics:
      enabled: true
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubelet:
      enabled: true
      spec:
        metricRelabelConfigs:
          # Remove duplicate labels provided by k3s
          - action: keep
            sourceLabels: ["__name__"]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            source_labels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeApiServer:
      enabled: true
      spec:
        metricRelabelConfigs:
          # Remove duplicate labels provided by k3s
          - sourceLabels: ["__name__"]
            regex: (aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)
            action: keep
          # Drop high cardinality labels
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop
    kubeControllerManager:
      enabled: false
      endpoints: &cp
        - 192.168.9.9
      spec:
        metricRelabelConfigs:
          # Remove duplicate labels provided by k3s
          - sourceLabels: ["__name__"]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|attachdetach_controller|authenticated_user|authentication|cronjob_controller|disabled_metric|endpoint_slice|ephemeral_volume|garbagecollector_controller|get_token|go|hidden_metric|job_controller|kubernetes_build|kubernetes_feature|leader_election|node_collector|node_ipam|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|pv_collector|registered_metric|replicaset_controller|rest_client|retroactive_storageclass|root_ca|running_managed|scrape_duration|scrape_samples|scrape_series|service_controller|storage_count|storage_operation|ttl_after|volume_operation|workqueue)_(.+)
            action: keep
    coreDns:
      enabled: true
    kubeEtcd:
      enabled: false
      endpoints: *cp
    kubeScheduler:
      enabled: false
      endpoints: *cp
      spec:
        metricRelabelConfigs:
          # Remove duplicate labels provided by k3s
          - sourceLabels: ["__name__"]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authenticated_user|authentication|disabled_metric|go|hidden_metric|kubernetes_build|kubernetes_feature|leader_election|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scheduler|scrape_duration|scrape_samples|scrape_series|workqueue)_(.+)
            action: keep
    kubeProxy:
      enabled: false
  valuesFrom:
    - targetPath: alertmanager.config.global.slack_api_url
      kind: Secret
      name: victoria-metrics-secret
      valuesKey: FLUX_SLACK_WEBHOOK
